apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  creationTimestamp: null
  name: fargate-ecs-cartservice-task-stop
  namespace: hce
spec:
  arguments:
    parameters:
    - name: adminModeNamespace
      value: hce
  entrypoint: ecs-task-stop
  podGC:
    strategy: OnWorkflowCompletion
  securityContext:
    runAsNonRoot: true
    runAsUser: 1000
  serviceAccountName: argo-chaos
  templates:
  - inputs: {}
    metadata: {}
    name: ecs-task-stop
    outputs: {}
    steps:
    - - arguments: {}
        name: ecs-task-stop-y7j
        template: ecs-task-stop-y7j
    - - arguments: {}
        name: cleanup-chaos-resources
        template: cleanup-chaos-resources
  - container:
      args:
      - kubectl delete chaosengine -l workflow_run_id={{workflow.uid}} -n {{workflow.parameters.adminModeNamespace}}
      command:
      - sh
      - -c
      image: docker.io/harness/chaos-go-runner:1.39.0
      name: ""
      resources: {}
    inputs: {}
    metadata: {}
    name: cleanup-chaos-resources
    outputs: {}
  - container:
      args:
      - -file=/tmp/chaosengine-ecs-task-stop-y7j.yaml
      - -saveName=/tmp/engine-name
      command:
      - ./chaos-checker
      image: docker.io/harness/chaos-go-runner:1.39.0
      name: ""
      resources: {}
    inputs:
      artifacts:
      - name: ecs-task-stop-y7j
        path: /tmp/chaosengine-ecs-task-stop-y7j.yaml
        raw:
          data: |
            apiVersion: litmuschaos.io/v1alpha1
            kind: ChaosEngine
            metadata:
              namespace: "{{workflow.parameters.adminModeNamespace}}"
              generateName: ecs-task-stop-y7j
              labels:
                name: ecs-task-stop
                app.kubernetes.io/part-of: litmus
                app.kubernetes.io/component: experiment-job
                app.kubernetes.io/enableAWSAccessViaSecrets: disable
                workflow_run_id: "{{ workflow.uid }}"
                workflow_name: fargate-ecs-cartservice-task-stop
              annotations:
                probeRef: '[{"probeID":"boutique-checkout-svc-health-check","mode":"OnChaos"},{"probeID":"cartservice-health-check","mode":"Continuous"},{"probeID":"boutique-app-health-check","mode":"SOT"}]'
            spec:
              engineState: active
              chaosServiceAccount: litmus-admin
              experiments:
                - name: ecs-task-stop
                  image: docker.io/harness/chaos-go-runner:1.39.0
                  imagePullPolicy: Always
                  args:
                    - -c
                    - ./experiments -name ecs-task-stop
                  command:
                    - /bin/bash
                  spec:
                    components:
                      env:
                        - name: TOTAL_CHAOS_DURATION
                          value: "60"
                        - name: RAMP_TIME
                          value: ""
                        - name: CHAOS_INTERVAL
                          value: "10"
                        - name: CLUSTER_NAME
                          value: ecs-demo
                        - name: SERVICE_NAME
                          value: cartservice
                        - name: REGION
                          value: us-east-1
                        - name: TASK_REPLICA_ID
                          value: ""
                        - name: TASK_REPLICA_AFFECTED_PERC
                          value: "100"
                        - name: DEFAULT_HEALTH_CHECK
                          value: "false"
                        - name: AWS_SHARED_CREDENTIALS_FILE
                          value: /tmp/cloud_config.yml
    metadata:
      labels:
        weight: "10"
    name: ecs-task-stop-y7j
    outputs: {}
status:
  finishedAt: null
  startedAt: null
